import os
import numpy as np

class FLP(object):
    #FunÃ§Ã£o para abrir uma instancia, dado o caminho dela
    def __init__(self, path):
        self.m = 0 #Quantidade de facilidades j de j = 1 atÃ© m
        self.n = 0 #Quantidade de clientes  i de i = 1 atÃ© n
        self.f = [] #Custo Fixo de cada facilidade j
        self.M = [] #ProduÃ§Ã£o mÃ¡xima de cada facilidade j
        self.d = [] #Demanda de cada cliente i
        self.c = [] #Matriz de custo de cada instalaÃ§Ã£o j para cada cliente i
        #RepresentaÃ§Ã£o serÃ¡ essa?? - YURI
        #Vai sim - Tito
        self.Y = [] #Vetor binÃ¡rio: se a facilidade j for aberta, entÃ£o Yj = 1, cc Yj = 0
        self.x = [] #Matriz: volume tranportado da capacidade j para o cliente i
        file = open(path)
        linhas = file.readlines()
        self.m = int(linhas[0].split()[0])       
        self.n = int(linhas[0].split()[1])       
        flag = 0
        for i in linhas:
            L = i.split()
            if(0 < flag <= self.m):
                self.M.append(float(L[0]))
                self.f.append(float(L[1]))
                
            if(flag == self.m+1 ):
                self.d = [float (j) for j in L]

            if(flag >= self.m+2):
                aux = []
                for j in range(len(L)):
                    aux.append(float(L[j]))
                self.c.append(aux)    

            flag += 1
        
        file.close()
        
        print('f do init=',self.f,'\n')   
                       
class FLPSol(FLP):
    def __init__(self, FLP):
        self.m = FLP.m #Quantidade de facilidades j de j = 1 atÃ© m
        self.n = FLP.n #QUantidade de clientes  i de i = 1 atÃ© n
        self.f = FLP.f = [] #Custo Fixo de cada capacidade j
        self.M = FLP.M #ProduÃ§Ã£ mÃ¡xima de cada capacidade j
        self.d = FLP.d #Demanda de cada cliente i
        self.c = FLP.c #Matriz de custo de cada instaÃ§Ã£o j para cada cliente i
        self.Y = FLP.Y #Vetor binÃ¡rio: se a facilidade j for aberta, entÃ£o Yj = 1, cc Yj = 0
        self.x = FLP.x #Matriz: volume tranportado da capacidade j para o cliente i.
    
    
    def solucaoInicial():
        return

    def moveTo():   ## Vizinhança <- bora fazer felipeta
        return

def restricaoDemanda1(FLP):
    m = FLP.m
    n = FLP.n
    d = FLP.d
    maxD = max(d)
    minD = min(d)
    x = [[0]*m]*n
    i = 0
    flag = False
    
    while ~flag:
        x[i] = np.random.randint(minD,maxD+1,size=n)
        if sum(x[i]) == d[i]:
            i+=1
        if i==n-1:    
            flag = True
            
    return x 

def restricaoDemanda2(FLP):
    m = FLP.m
    n = FLP.n
    d = FLP.d
    maxD = max(d)
    minD = min(d)
    X = [[0]*m]*n
    Y = [0]*m
    i = 0
    j = 0
    flag = False
    
    while ~flag:
        x = np.random.randint(minD,maxD+1)
        y = np.random.randint(0,2)
        if x <= d[i]*y:
            X[i][j] = x
            Y[j] = y
            
            if j == m-1:
                j = 0
                i += 1
            else:
                j+=1
                
        if i==n-1:    
            flag = True
        
    return X 


def restricaoCapacidade(FLP):
    m = FLP.m
    n = FLP.n
    d = FLP.d
    M = FLP.M
    maxD = max(d)
    minD = min(d)
    x = [[0]*m]*n
    Y = [0]*m
    j = 0
    flag = False
    
    while ~flag:
        x[j] = np.random.randint(minD,maxD+1,size=n)
        Y = np.random.randint(0,2,size = m)
        if sum(x[j]) <= (M[j]*Y[j]) :
            j+=1
        if j==n-1:    
            flag = True
            
    return x,Y


# FunÃ§Ã£o para avaliar as soluÃ§Ãµes de vÃ¡rias instancias
def benchmark(diretorio, maxinter):
    #(f*y) + cij*xij
    sol = []
    objs = []
    obj = []
    fList = os.listdir(diretorio)
    cont = 0
    acum= 0
    a = 0
    for j in fList:
        sol.append(diretorio+'/'+j)                 #vetor com o endereÃ§o de cada arquivo
    #print(sol)
    
    print('sol0=',sol[0])
    print('sol1=',sol[1])
    print('sol1=',sol[2])
    g = FLP(sol[0])
    h = FLP(sol[1])
    o = FLP(sol[2])
    print('f do g=',g.f)
    print('f do h=',h.f)
    print('f do o=',o.f)
    
    for i in sol:
        abj = FLP(i)
        objs.append(abj)
        #print('f flp ',i,'=',abj.f)
        del abj
    
   

    #print('1=',objs[0].f)
    #print('2=',objs[1].f)
    for k in objs:
        #print('f do k=',k.f)
        #path = diretorio+'/'+l
        
        #sol = FLP(path)
        #print('path=',path)
        #print('f do sol=',sol.f)
        #sol.open(path)
        #print('tam=',sol.m)
        #Y = [0]*k.m
        #x = [0]*(k.m*k.n)
        Y = np.random.randint(0,2,size = k.m)
        x = np.random.randint(0,30,size = (k.n,k.m))
        #x = restricaoDemanda1(k)
        #print('f=',sol.f,'\ntam=', len(sol.f))
        #print('Y=',sol.Y,'\ntam=', len(sol.Y))
        #print('x=',sol.x)
        #+ np.dot(k.c,x) )
        a= np.dot(k.f,Y)
        for i in range (k.n):
            acum+= np.dot(k.c[i],x[i])
            
        obj.append(a+acum)    
        print(obj[cont])
#            print(sol.d)
#            print(maxinter)
        cont += 1
        print("------------------")
        if(maxinter > 0 and cont > maxinter):
            break
    



caminhoDiretorio = "C:/Users/OPL - 01/Downloads/tito/flp/instancias"       #Alterar a pasta para funcionar
caminhoArquivo = "C:/Users/OPL - 01/Downloads/tito/flp/instancias/cap61"
benchmark(caminhoDiretorio,2)
#t = FLP(caminhoArquivo)     
#test = FLPSol(t) #DÃºvida se precisa de duas classes como o albert usa... - YURI
